'''
Библеотеки
Это питоновский код написанный ранее, которым можно пользоваться
Есть встроенные в питон
Некоторые устанавливаются отдельно
'''
# Добавление библеотек

import random # Импортируем модуль Рандом(Самая популярная билеотека)
# import random as rnd # Модуль можно переименовать для удобства обращения

# Создадим простой код который будет заполнять список случайными целыми значениями

lst = [] # Создали пустой список
for _ in range(10): # Используем анонимную переменную  "_"
    # Сначала исп-м ф-ю добавления(.append) а внутри нее:
    # 1-м пишем наз-е модуля(random) а 2-м наз-е ф-ии от туда(.randit)
    lst.append(random.randint(1, 100)) # получим случайное целое число от 1 до 100
    # включительно
    
print(lst)

# Другой вариант
#
from random import randint # Импортируем из модуля random только ф-ю randint
# (есть риск конфликта имен в большом коде)
# Тогда мы можем писать код без упоминания имени модуля



lst = []
for _ in range(10):
    lst.append(randint(1,100))
print(lst)


# Добавим ф-ю. 
import random as rnd

# Метод это- ф-я приписанная к некому классу
# функция более самостоятельный элемент


# Ф-ю Принято выделать на верх программного кода после блока импорта
# Написание ф-ии начинаем с def (в названии ф-ии рек-ся вначале использовать глагол)
def create_rnd_list(size): # Создаем ф-ю create_rnd_list 
                                            # На входе добавляем переменную size
    lst = [] # Создали пустой список
    for _ in range(size):
        lst.append(rnd.randint(1, 100)) # Создает случайное целое число от 1 до 100
    return lst # Возвращаем значение lst(Возвращает инф-ю в тело основного кода)

print(create_rnd_list(8))

# __________________________________________________________________
# def plus_two_values(v1, v2) # Создаем ф-ю сложения двух значений
def plus_two_values(v1, v2): # Создаем ф-ю и используем анатицию типов данных 
    
    '''
    Напишем справку по этой функции, пр:
    this function add two integer values
    '''
    
    return v1 + v2
# Можно посмотреть справку к функции:
print(plus_two_values.__doc__) # метод Дандер(__doc__)
print(plus_two_values(5,8)) # Запишем работу ф-ии и подадим туда значение
## 13

# ___________________________________________________________________________
#  Создаем ф-ю и используем анатицию типов данных(улучшает читаемость кода)

def plus_two_values(v1: int, v2: int) -> int: # 1-й и 2-й арг. должены быть int 
                                                    # и рез-т тоже должен быть int
    
    '''
    Напишем справку по этой функции, пр:
    this function add two integer values
    '''
    # returen v1 + v2
    if isinstance(v1, int) and isinstance(v2, int): # (isinstance)Проверяет 
                                                # являются ли переменные типа int
        return v1 + v2 # если явл-ся то возвращаем значение v1 + v2
    else:
        print("Error!") # Если переменные не типа int выводим Error!

# Либо:_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 


    if not (isinstance(v1, int) and isinstance(v2, int)): # Если хотябы одна 
                                                                # перменная не int
        raise TypeError("Must be int values") # то мы генерируем ошибку 
                                                            # "Must be int values"
    return v1 + v2

print(plus_two_values(5,8))


# Для помощи можно исп-ю ф-ю:
help(print)


#################################################################################

#  - Функция должна выполнять одну задачу но хорошо
#  - Нельзя создавать ф-ю котороя решает много задач т.к. ф-я основной строительный
#                                               зл-т кода и она должна быть читаема
#  - Функция может использовать внутри себя другие функции
#  - В назавании ф-ии в начале рекомендуется исп-ть глагол для легкокого
                                                    # понимания назначения ф-ии

# ф-ии отделяем друг от друга минимум 1-й пустой строкой

# описания  ф-ии идет после блока импорта

# Тело основного кода принято писать ниже ф-ии на 4 строчки для лучшей читаемости

# Для читаемости Мы можем свою ф-bb написать в отдельном файле
# и ипортировать их в основной код

# T.C  -> 47 min