# Домашная работа № 3

'''
Задание 1: Видеокарты


В базе магазина электроники есть список видеокарт компании NVIDIA разных
поколений. Вместо полных названий хранятся только числа, которые обозначают
модель и поколение видеокарты. Недавно компания выпустила новую линейку
видеокарт. Самые старшие поколения разобрали за пару дней.
Напишите программу, которая удаляет наибольшие элементы из списка видеокарт.


Пример:
Количество видеокарт: 5
Видеокарта 1: 3070
Видеокарта 2: 2060
Видеокарта 3: 3090
Видеокарта 4: 3070
Видеокарта 5: 3090
Старый список видеокарт: [ 3070 2060 3090 3070 3090 ]
Новый список видеокарт: [ 3070 2060 3070 ]
________________________________________________________________________________

Подсказка № 1
Для начала получите количество видеокарт от пользователя и создайте пустые списки
для хранения введённых видеокарт и нового списка без наибольших элементов.


Подсказка № 2
Используйте цикл для ввода номеров видеокарт. Во время ввода также определите
наибольшую видеокарту, обновляя переменную maxItem при каждом вводе, если
текущий элемент больше предыдущего максимума.


Подсказка № 3
После ввода всех видеокарт, пройдитесь по списку и создайте новый список, в который
добавляйте только те видеокарты, которые не равны максимальному значению,
найденному ранее.


Подсказка № 4
Для вывода старого списка видеокарт, используйте цикл, чтобы пройти по всем
элементам списка и распечатать их в требуемом формате. Для вывода нового списка
видеокарт, сделайте то же самое, что и для старого списка, но с новым списком,
который не содержит наибольших значений. Убедитесь, что формат вывода совпадает
с требуемым.

'''


# # 3070 2060 3090 3070 3090 
# qty_cards = int(input("Введите количество видеокарт: "))
# old_list = list()
# new_list = list()
# maxItem = 0
# for i in range(qty_cards):
#     card = int(input(f'видеокарта {i+1}: '))
#     old_list.append(card)
#     # card = 0
#     # old_list.append(int(input(f'видеокарта {i+1}: ')))
#     if card > maxItem:
#         maxItem = card

# print("старый список видеокард:",old_list)
# print('старшая видеокарта', maxItem)

# for i in old_list:
#     if i != maxItem:
#         new_list.append(i)
# print("Новый список видеокард:",new_list)
    


# _______________________________________________________
# # Эталонное решение:
# # Ввод количества видеокарт
# videoСardsNumber = int(input('Введите количество видеокарт: '))
# # Инициализация списка для хранения видеокарт
# videoСards = []
# newVideoCardsList = []
# maxItem = 0
# # Заполнение списка видеокарт и определение наибольшего элемента
# for item in range(videoСardsNumber):
# # Ввод номера видеокарты и добавление в список
#     videoСards.append(int(input(f'Видеокарта {item + 1}: ')))
# # Обновление значения максимального элемента
#     if videoСards[item] > maxItem:
#         maxItem = videoСards[item]
# # Формирование нового списка без наибольших элементов
# for item in range(videoСardsNumber):
#     if videoСards[item] != maxItem:
#         newVideoCardsList.append(videoСards[item])
# # Вывод старого списка видеокарт
# print()
# print('Старый список видеокарт: [', end=' ')
# for item in range(videoСardsNumber):
#     print(videoСards[item], end=' ')
# print(']')
# # Вывод нового списка видеокарт
# print('Новый список видеокарт: [', end=' ')
# for item in range(len(newVideoCardsList)):
#     print(newVideoCardsList[item], end=' ')
# print(']')




'''
Задача 2. Кино

Илья зашёл на любительский киносайт, на котором пользователи оставляют
рецензии на фильмы. Их список:

films = [‘Крепкий орешек’, ‘Назад в будущее’, ‘Таксист’, ‘Леон’, ‘Богемская
рапсодия’, ‘Город грехов’, ‘Мементо’, ‘Отступники’, ‘Деревня’]

Илья на сайте в первый раз. Он хочет зарегистрироваться и сразу добавить
часть фильмов в список любимых, чтобы позже прочитать рецензии на них.

Напишите программу, в которой пользователь вводит фильм. Если кинокартина
есть в перечне, то добавляется в список любимых. Если её нет, то выводится
ошибка. В конце выведите весь список любимых фильмов.


Пример:
Сколько фильмов хотите добавить? 3
Введите название фильма: Леон
Введите название фильма: Безумный Макс
Ошибка: фильма Безумный Макс у нас нет :(
Введите название фильма: Мементо
Ваш список любимых фильмов: Леон, Мементо

_____________________________________________________________________________
Подсказка № 1
Создайте список доступных фильмов (films), который содержит все фильмы, которые
могут быть добавлены в список любимых. Также инициализируйте пустой список для
хранения любимых фильмов (my_list).


Подсказка № 2
Используйте цикл, чтобы многократно запрашивать у пользователя название фильма.
Внутри цикла вводите название фильма и сохраняйте его в переменной movie.


Подсказка № 3
Проверьте, содержится ли введённый фильм в списке доступных фильмов (films).
Если фильм присутствует в списке, добавьте его в список любимых фильмов
(my_list). Если фильма нет в списке, выведите сообщение об ошибке, указывая, что
такого фильма нет.

'''

# # films = list()
# films = ['Крепкий орешек', 'Назад в будущее', 'Таксист', 'Леон', 'Богемская рапсодия', 'Город грехов', 'Мементо', 'Отступники', 'Деревня']
# print(films)
# qty_films = int(input('Сколько фильмов хотите добавить? '))
# favorite = list()

# for i in range(qty_films):
#     movie = input("Введите название фильма: ")
#     if movie in films:
#         favorite.append(movie)
#     else:
#         print(f'Ошибка: Фильма {movie} у нас нет')
# print('Ваш список любимых фильмов:',favorite)


# # ________________________________________________________
# # Эталонное решение:
# # Список доступных фильмов
# films = ['Крепкий орешек', 'Назад в будущее', 'Таксист',
# 'Леон', 'Богемская рапсодия', 'Город грехов',
# 'Мементо', 'Отступники', 'Деревня']
# # Инициализация пустого списка для любимых фильмов
# my_list = []
# # Ввод количества фильмов, которые пользователь хочет добавить
# movies_count = int(input('Сколько фильмов хотите добавить? '))
# # Цикл для ввода названий фильмов
# for _ in range(movies_count):
# # Ввод названия фильма
#     movie = input('Введите название фильма: ')
# # Проверка наличия фильма в списке доступных фильмов
#     if movie in films:
# # Добавление фильма в список любимых, если он есть в списке
#         my_list.append(movie)
#     else:
# # Вывод сообщения об ошибке, если фильма нет в списке
#         print(f'Ошибка: фильма {movie} у нас нет :(')
# # Вывод списка любимых фильмов
# print(f'\nВаш список любимых фильмов: {my_list}')






'''

Задача 3. Сортировка

Дан список из N чисел. Напишите программу, которая сортирует элементы
списка по возрастанию и выводит их на экран. 

Дополнительный список использовать нельзя.

Также нельзя использовать готовые функции sorted/min/max и метод sort

Постарайтесь придумать и написать как можно более эффективный алгоритм
сортировки.


Пример:
Изначальный список: [1, 4, –3, 0, 10]
Отсортированный список: [–3, 0, 1, 4, 10]

___________________________________________________________________________
Подсказка № 1
Используйте алгоритм сортировки пузырьком (Bubble Sort). В этом алгоритме два
вложенных цикла сравнивают элементы списка и меняют их местами, если они
находятся в неправильном порядке.

Подсказка № 2
Во внешнем цикле проходите по всем элементам списка, за исключением последнего
элемента на каждом шаге, так как он уже будет на своем месте. Внутренний цикл
сравнивает и меняет местами соседние элементы списка.

Подсказка № 3
Во внутреннем цикле сравнивайте текущий элемент с следующим. Если текущий
элемент больше следующего, меняйте их местами. Это приведет к тому, что на каждом
проходе элементы с наибольшим значением будут перемещаться в конец списка.

'''
# Решение не пошло
# n = [1, 4, -3, 0, 10]
# # previous
# print('Заданный список:',n)
# max = n[0]
# for i in range (len(n)-1):
# # for i in range (len(n)-1-i):
#     # i += 1
#     for j in range(n[len(n)-1]):
#         if n[j] > n[j + 1]:
#             n[j], n[j + 1] = n[j + 1], n[j]
# print("max",max)      
            
             
        
# print("Отсартированный:",n)
    
# # Рабочее решение(gpt)
# list_n = [1, 4, -3, 0, 10] # Определяем список: 

# n = len(list_n) #  Находим длину списка: 

# for i in range(n): # Внешний цикл `for i in range(n)` проходит по всему списку.
#     for j in range(0, n-i-1): # внутренний цикл проходит по остальным элементам списка, сравнивая соседние элементы. 
#         if list_n[j] > list_n[j+1]: # Сравниваем элементы: Если текущий элемент больше следующего, мы меняем их местами.
#             list_n[j], list_n[j+1] = list_n[j+1], list_n[j] # Меняем местами элементы:

# print(list_n) # Выводим отсортированный список


# # _________________________________________________________________
# # Эталонное решение:
# # Исходный список чисел
# original_list = [1, 4, -3, 0, 10]
# # Вывод исходного списка
# print('Изначальный список: ', original_list)
# # Реализация сортировки пузырьком (Bubble Sort)
# for i in range(len(original_list) - 1):
#     # Проход по всем элементам списка, за исключением уже отсортированных
#     for j in range(len(original_list) - 1 - i): # (-i) т.к. при каждой итерации длина массива становиться меньше
#         # Сравнение текущего элемента с следующим
#         if original_list[j] > original_list[j + 1]:
#             # Если текущий элемент больше следующего, меняем их местами
#             original_list[j], original_list[j + 1] = original_list[j+ 1], original_list[j]
# # Вывод отсортированного списка
# print('Отсортированный список: ', original_list)




'''
Задача 4. Товары

В базе данных магазина вся необходимая информация по товарам делится на
два словаря:
    первый отвечает за коды товаров, 
    второй — за списки количества разнообразных товаров на складе:

goods = {'Лампа': '12345', 'Стол': '23456', 'Диван': '34567', 'Стул': '45678',} 

store = {'12345': [{'quantity': 27, 'price': 42},], 
'23456': [{'quantity': 22, 'price': 510},{'quantity': 32, 'price': 520},],
'34567': [{'quantity': 2, 'price': 1200},{'quantity': 1, 'price': 1150},],
'45678': [{'quantity': 50, 'price': 100},{'quantity': 12, 'price': 95},{'quantity': 43, 'price': 97},],}


Каждая запись второго словаря отображает, сколько и по какой цене
закупалось товаров. Цена указана за одну штуку.

Напишите программу, которая рассчитывает общую стоимость позиций для
каждого товара на складе и выводит эту информацию на экран.


Результат работы программы:
Лампа — 27 штук, стоимость 1134 рубля.
Стол — 54 штуки, стоимость 27 860 рублей.
Диван — 3 штуки, стоимость 3550 рублей.
Стул — 105 штук, стоимость 10 311 рублей.

____________________________________________________________________________
Подсказка № 1
В цикле по goods.keys() получайте код товара. Используйте этот код для поиска
информации о товаре в словаре store. Это поможет вам получить все необходимые
данные о количестве и цене.

Подсказка № 2
Инициализируйте переменные total_quantity и total_cost перед началом цикла
для подсчета общей информации по каждому товару. Это необходимо для накопления
данных по каждому товару отдельно.

Подсказка № 3
Внутри цикла по store[item_code], где item_code — код товара, проходите по
каждому элементу списка и обновляйте переменные total_quantity и total_cost.
Убедитесь, что вы правильно добавляете количество и рассчитываете стоимость.
'''
# не смог решить, эталлонное решение выводить информацию только по последнему ключу
# Необходимо доработать!!!!!!!

#Эталонное решение:

# goods = {'Лампа': '12345', 'Стол': '23456', 'Диван': '34567', 'Стул': '45678',}

# store = {'12345': [{'quantity': 27, 'price': 42},], 
# '23456': [{'quantity': 22, 'price': 510},{'quantity': 32, 'price': 520},], 
# '34567': [{'quantity': 2, 'price': 1200},{'quantity': 1, 'price': 1150},], 
# '45678': [{'quantity': 50, 'price': 100},{'quantity': 12, 'price': 95},{'quantity': 43, 'price': 97},],}

# # Проходим по всем товарам в словаре goods
# for item_name in goods.keys():
#     # Получаем код товара из словаря goods
#     item_code = goods[item_name]


# # Инициализируем переменные для подсчета общего количества и стоимости
# total_quantity = 0
# total_cost = 0

# # Проходим по всем записям для данного товара в словаре store
# for entry in store[item_code]:
# # Увеличиваем общее количество товара
#     total_quantity += entry['quantity']

# # Увеличиваем общую стоимость товара
#     total_cost += entry['price'] * entry['quantity']

# # Выводим информацию о товаре
# print('{} — {} штук, стоимость {} рубля(ей).'.format(item_name,
# total_quantity, total_cost))




#  часть моего не рабочего кода
#__________________________________________________________________
# for item in store:
    
#     print('{}: {}'.format(item, store[item])) # Выводим ключ(item), обращаемся к словарю(dictionary) и выводим значение[item]
# print(item) # Выводит ключи
    # print(store.values())

# ___________________
# store[item_code]


# for i in store:
#     for key, value in i.items():
        
        
# print(total_quantity)



'''
Задача 5. Пицца
В базе данных интернет-магазина PizzaTime хранятся сведения о том, кто, что и
сколько заказывал у них в определённый период.

Вам нужно структурировать эту информацию и определить, 
сколько всего пицц купил каждый заказчик.
На вход в программу подаётся N заказов. Каждый заказ представляет собой
строку вида «Покупатель — название пиццы — количество заказанных пицц».

Реализуйте код, который выводит список покупателей и их заказов по
алфавиту. Учитывайте, что один человек может заказать одну и ту же пиццу
несколько раз.


Пример:

Введите количество заказов: 6
Первый заказ: Иванов Пепперони 1
Второй заказ: Петров Де-Люкс 2
Третий заказ: Иванов Мясная 3
Четвёртый заказ: Иванов Мексиканская 2
Пятый заказ: Иванов Пепперони 2
Шестой заказ: Петров Интересная 5
Иванов:
Мексиканская: 2
Мясная: 3
Пепперони: 3
Петров:
Де-Люкс: 2
Интересная: 5


______________________________________________________________________________
Подсказка № 1
Для обработки каждого заказа используйте метод split() для разделения строки на
компоненты: покупателя, название пиццы и количество. Преобразуйте количество из
строки в целое число для последующих операций.


Подсказка № 2
Используйте вложенные словари для хранения данных. Внешний словарь будет
содержать покупателя как ключ и внутренний словарь как значение. Внутренний
словарь будет хранить названия пицц и их количества.


Подсказка № 3
Если покупатель уже существует в словаре, проверьте, есть ли в его списке пицца,
которую он заказал. Если пицца уже есть, увеличьте количество. Если нет — добавьте
новую запись.

'''
# store = {'12345': [{'quantity': 27, 'price': 42},], 
# '23456': [{'quantity': 22, 'price': 510},{'quantity': 32, 'price': 520},], 
# '34567': [{'quantity': 2, 'price': 1200},{'quantity': 1, 'price': 1150},], 
# '45678': [{'quantity': 50, 'price': 100},{'quantity': 12, 'price': 95},{'quantity': 43, 'price': 97},],}



# РЕШЕНИЕ:
# pizzaTime = {'Иванов': [{'Пепперони': 1}],
# 'Петров': [{'Де-Люкс': 2}],
# 'Иванов': [{'Мясная': 3}],
# 'Иванов': [{'Мексиканская': 2}],}

# for i in range(n):
#     order = list(input(f{i}'заказ: '))
# print(pizzaTime)



ordersCount = int(input("Введите колличество заказов: "))
ordersBase = dict()

for i_order in range(ordersCount):
    customer, pizza_name, count = input('{} заказ: '.format(i_order+ 1)).split()







