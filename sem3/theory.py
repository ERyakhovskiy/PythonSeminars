'''
Списки [] _____list_____________________________________ 
'''

sp = list()# Создание список
sp = [-1, True, 'hello', 5.77, 8.999, 'world'] # Заполнили его значениями

print(sp) # вывели весь список
print(sp[2:5]) # Вывели срез

# итерация по спискам
# 1. Классический вывод:
for i in range(len(sp)):
    print(f"{i} - {sp[i]}") # вывели все эл-ты списка построчно

# 2. Итерация без индексов
for el in sp: # переменная el превращается в каждый эл-т списка
    print(el, end = ' ') # вывели все эл-ты в одну строку\
        
print(end = '\n') # изменили вывод на построчный

# Методы добавления информации в списки
# 1- й .append
sp.append('last') #  добавляет информацию в конец
# 2-й .insert
sp.insert(0, 'first') #  добавляет инф-ю в любое место, а все эл-ты справа двигаются
print(sp) #
# 3-й !?


# Методы удаления инф-ии из списка;
# 1.remove
sp.remove(True) # удаляет по значению,не все, а только первое вхождение
print(sp)
# 2. del
del sp[0] # удаляет по индексу
print(sp)
# 3. pop # По сути не удаляет а вырезает значение, которое потом можно куда-нибудь сохранить
a = sp.pop() # По умолчанию вырезает последнее значение, либо по индексу # a = sp.pop(1)
print(a)
print(sp)

'''
кортежи () ______tuple__________________________________________ 
'''
# кортежи это незименяемая колекция данных. Удобно исп-ть при передаче данных между приложениями. Гораздо быстрее итерируется
t = tuple(sp) # делаем кортеж t из списка sp
print(t)
# t[0] = 1 Если попытаться поменять значение кортежа выйдет ошибка TypeError: 'tuple' object does not support item assignment

'''
Словари {} ______dict_________________________________________ 

'''
# - Это совокупность пар (ключ, значениe)

d = {}
d['дядя Ваня' ] = 8645464
d['дядя Вася' ] = 8921213
print(d) # {'дядя Ваня': 8645464, 'дядя Вася': 8921213}
print(d.keys()) # выводит инф-ю о всех ключах # dict_keys(['дядя Ваня', 'дядя Вася'])
print(d.values()) # выводит инй-о всех значениях # dict_values([8645464, 8921213])


# Если вы хотите проверить содержиться ли что то в любой колекции 
# используйте Конструкцию in :

print(t)
print('hi' in t) # False
print('hello' in t) # True

for i in d:
    print(i) # Выводит по очереди значение ключей # дядя Ваня

# метод индекс(.items)
for key, value in d.items(): # При каждой итерации цикла, key принимает значение ключа, а value значение
    print(f"{key} - {value}") # Выводит и ключи и их значения построчно # дядя Ваня - 8645464
    
'''
множество _____set_____________________________________________  
'''
# - Это не упорядоченная коллекция содержащая уникальные эл-ты

s = {1,1,1,1,5,5,8,8,8,8,8,}
print(s) # Выводит только уникальные значения # {8, 1, 5}
s.add(7) # Добавили новое значение 7
print(s) # {8, 1, 5, 7}
s.discard(1) # удалили значение 1
s.discard(2) # Если удаляем не существующее значение ни чего не происходит
# .discard безопасные метод удаления т.к. не вызывает ошибок
print(s) # {8, 5, 7}

# можно использовать конструкцию in