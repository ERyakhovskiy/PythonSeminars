
'''
# Списки
'''

# создание списков
# нельзя называть списки именами зарезервированными питом пр. list, dict и т.д.
sp = list()
sp = [-1, True, 'hello', 5.77, 8.999, "world"]

print(sp)

# Для того чтобы взять некоторую часть списка можно пользоваться срезами

# Срезы работаю в спискообразных коллекциях (строки, списки, кортежи)

print(sp[2:5]) # берем значения со 2 по 4(т.к крайнее значение не берется)

# Итерация по спискам:

# Классический вывод:
for i in range(len(sp)):
    print(f"{i} - {sp[i]}")
   
# 0 - -1
# 1 - True
# 2 - hello
# 3 - 5.77
# 4 - 8.999
# 5 - world

# итерация без индексов
for el in sp:
    print(el, end = ' ') # переменная el превращается в каждый эл-т списка. еnd меняет вывод с построчного в одну строку
    ## -1 True hello 5.77 8.999 world

print(end = '\n')


# методы добавления информации в список:

sp.append('last') # append добавляет в конец
sp.insert(0, 'first') # insert добавляет в любое место(индекс), а все эл-ты справа двигаются
print(sp) 
# ['first', -1, True, 'hello', 5.77, 8.999, 'world', 'last']

# удаление информации из списка

sp.remove(True) # удаляет по значению, только первное вхождение
print(sp)
# ['first', -1, 'hello', 5.77, 8.999, 'world', 'last']
del sp[0] # удаление по индексу
print(sp)
# [-1, 'hello', 5.77, 8.999, 'world', 'last']
a = sp.pop() # вырезает переменную(по умолчанию последню, либо по индексу) которую можно сохранить и потом распечатать
print(a)
# last
print(sp)
# [-1, 'hello', 5.77, 8.999, 'world']




'''
# КОРТЕЖИ (не изменяемая коллекция) быстрее итерируется
'''
# сделаем кортеж t из списка sp
t = tuple(sp)
print(t)
# t[0] = 1
# TypeError: 'tuple' object does not support item assignment(кортеж не дает изменить значение)



'''
# СЛОВАРИ:(совокупность пар: ключ - значение)
'''
d = {}
d['дядя ваня'] = 9897775566
d['дядя вася'] = 9996665544
print(d)
# {'дядя ваня': 9897775566, 'дядя вася': 9996665544}
print(d.keys()) # выдать информацию о всех ключах
# dict_keys(['дядя ваня', 'дядя вася'])
print(list(d.keys())) # Превращает только ключи в список

print(d.values()) # выдать информацию о всех значениях
# dict_values([9897775566, 9996665544])

# конструкция in   / Если вы хотите проверить содержиться ли что то в любой коллекции

print('hi' in t)
# False
print('hello' in t)
# True

# можно использовать цикл for для прохода по словарю
for i in d:
    print(i) # переменная i принимает по очереди только значение ключей
# дядя ваня
# дядя вася

# чтобы вывести и ключи и значения ипользуем метод ИНДЕКС

for key, value in d.items(): # вместо key и value можно использовать любые имена
    print(f'{key} - {value}')
# дядя ваня - 9897775566
# дядя вася - 9996665544




'''
# МНОЖЕСТВА:
# Это не упорядоченная коллекция содержащая уникальные эл-ты
'''

s = {1,1,1,1,5,5,8,8,8,8,8,}
print(s)
# {8, 1, 5}
s.add(7) # добавляет эл-т
print(s)
# {8, 1, 5, 7}
s.discard(1) # безопасно удаляет эл-т
s.discard(2) # т.к. 2 в списке нет discard ни чего не делает
print(s)
print(type(s))
# {8, 5, 7}


# Коллекции можно друг в друга преварщать

# list()  - [] список
# tuple() - () кортеж
# set()   - {} множество


# в словаре пары значений поэтому он не превращается
# dict()  - {} словарь
